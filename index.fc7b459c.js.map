{"mappings":"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","sources":["node_modules/typed.js/src/defaults.js","node_modules/typed.js/src/initializer.js","node_modules/typed.js/src/html-parser.js","src/javascript/main.js","node_modules/typed.js/src/typed.js"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!'\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {}\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.display = 'none';\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n    // the order of strings\n    self.sequence = [];\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    this.appendAnimationCss(self);\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendAnimationCss(self) {\n    const cssDataName = 'data-typed-js-css';\n    if (!self.autoInsertCss) {\n      return;\n    }\n    if (!self.showCursor && !self.fadeOut) {\n      return;\n    }\n    if (document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.type = 'text/css';\n    css.setAttribute(cssDataName, true);\n\n    let innerCss = '';\n    if (self.showCursor) {\n      innerCss += `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n    }\n    if (self.fadeOut) {\n      innerCss += `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n    }\n    if (css.length === 0) {\n      return;\n    }\n    css.innerHTML = innerCss;\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import Typed from './../../node_modules/typed.js/src/typed.js';\n\nconst options = {\n  backDelay: 2000,\n  backSpeed: 30,\n  loop: true,\n  smartBackspace: true,\n  strings: ['fessional', 'active', 'ficient', 'ductive'],\n  typeSpeed: 70,\n};\n\nconst typed = new Typed('.typed', options);\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // Check if there is some text in the element, if yes start by backspacing the default message\n      if (!this.currentElContent || this.currentElContent.length === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        // Start typing\n        this.backspace(this.currentElContent, this.currentElContent.length);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substr(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substr(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substr(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substr(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"],"names":["$bd27c4f0f0595cee$export$2e2bcd8739ae039","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","load","options","elementId","el","document","querySelector","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","s","trim","style","display","Array","prototype","slice","apply","children","stringsLength","length","i","stringEl","push","innerHTML","strPos","stopNum","curLoop","sequence","pause","status","typewrite","curString","curStrPos","typingComplete","currentElContent","this","getCurrentElContent","appendAnimationCss","self1","value","self2","cssDataName","css","createElement","type","setAttribute","innerCss","$d8cd5c719d8d2b3a$export$d0ec6090f140ad51","typeHtmlChars","curChar","substr","charAt","endTag","backSpaceHtmlChars","curString1","curStrPos1","$155136985e733745$export$aff46cc71669aeb2","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanize","humanizer","numChars","pauseTime","test","skip","exec","parseInt","temporaryPause","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","curString2","curStrPos2","complete","curString3","curStrPos3","initFadeOut","curStringAtPosition","curString4","curStrPos4","isTyping","isBlinking","add","speed","Math","round","random","sort","className","str","addEventListener","e","insertBefore","nextSibling"],"version":3,"file":"index.fc7b459c.js.map"}